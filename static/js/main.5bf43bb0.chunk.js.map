{"version":3,"sources":["images/QRPlaceholder.svg","images/close.svg","images/info.svg","Component/QRGenerator.jsx","Component/About.jsx","Component/Test.jsx","Component/Routes.jsx","Component/StaticHeader.jsx","Component/StaticFooter.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","GeneratorComp","state","url","QRCodeText","imageSize","fileFormat","FGColor","BGColor","errorCorrect","codeBorder","imageURL","savedQRCodes","loading","setLoading","getCode","e","preventDefault","codeURL","console","log","setState","changeHandler","event","nam","target","name","val","value","this","style","styles","inputForm","className","id","qrCodeImageButtons","imageContainer","onLoad","src","QRPlaceholder","height","width","alt","QRCode","qrCodeButtons","buttonSend","onClick","nameTextFields","codeText","textFieldInput","rows","cols","placeholder","onChange","radios","radioGroupDiv","H2","inputLabel","type","radioInput","label","Component","errorTest","display","margin","paddingTop","background","borderRadius","color","buttonSave","downloadIcon","maxWidth","codeName","nameFieldInput","fontSize","resize","textShadow","textAlign","aboutAllDiv","justifyContent","aboutHeading","center","padding","border","aboutTextDiv","alignContent","h1","textDecoration","fontWeight","close","transform","leftDiv","rightDiv","About","props","to","Close","h2","Test","bind","onSubmit","headings","Routes","exact","path","component","QRGenerator","Header","headerDiv","ellipsis","fill","flexDirection","borderBottom","Footer","footerDiv","h3","position","bottom","borderTop","lineHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bf43bb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/QRPlaceholder.72950f71.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.79d274c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.cc3e92b4.svg\";","// node\nimport React, { Component } from 'react'\n// import React, { Component, useEffect } from 'react'\n\n// src\nimport QRPlaceholder from '../images/QRPlaceholder.svg'\n// import Axios from 'axios';\n\n// smart component holding code to get qr code from user inputs\n\nclass GeneratorComp extends Component {\n\n    //state object holding app variables\n\n    state = {\n\n        // QR code api url variables\n        url: 'https://api.qrserver.com/v1/create-qr-code/?data=',\n        QRCodeText: '',\n        imageSize: '',\n        fileFormat: '',\n        FGColor: '',\n        BGColor: '',\n        errorCorrect: '',\n        codeBorder: '',\n        imageURL: '',\n\n        // local storage array for previous codes\n        savedQRCodes: [],\n\n        // loading screen variables \n\n        loading: false,\n        setLoading: false\n\n    };\n\n    //     this.changeHandler = this.changeHandler.bind(this);\n    //     // console.log(this.state)\n    // }\n\n    // not used\n    // componentDidMount() { }\n\n    // get user inputs stored in state and concatenating into into a url being sent to QR code api\n    getCode = (e) => {\n        e.preventDefault()\n        let codeURL =\n            `${this.state.url}${this.state.QRCodeText}${this.state.imageSize}${this.state.fileFormat}${this.state.FGColor}${this.state.BGColor}${this.state.errorCorrect}${this.state.codeBorder}`\n\n        console.log(codeURL)\n        console.log(this.state.loading)\n\n        // updates QR code image placeholder to image received from api\n\n        if (this.state.imageURL !== codeURL) {\n\n            this.setState({\n                imageURL: codeURL,\n                loading: true\n            })\n        }\n\n        // let loadScreenAndErrors = async () => {\n        //     try {\n        //         await Axios\n        //             // let data = await Axios\n        //             .get(codeURL)\n        //             .then(response => {\n        //                 console.log('Fresh URL', response)\n        //                 console.log(codeURL)\n        //                 this.state.loading = true;\n        //                 this.setState({\n        //                     imageURL: codeURL\n        //                 })\n\n        //             });\n        //         // this.state.loading = false;\n        //         console.log('74', this.state.loading)\n        //     } catch (e) {\n        //         console.log('There was an error', e)\n        //         // alert('There was an error', e)\n\n        //         let errorModal = () => {\n        //             document.querySelector('#test').style.display = \"inline\";\n        //         }\n\n        //         errorModal()\n        //     }\n        // }\n\n        // // console.log(this.imageURL)\n        // loadScreenAndErrors()\n    }\n\n    // when there is a input value change [event] this function calls and updates the corresponding state value\n    changeHandler = (event) => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({ [nam]: val });\n        // this.setState({text: event.target.value});\n        // console.log(this.state)\n    }\n\n    // errorModal = () => {\n    //     alert('Error Modal')\n    // }\n\n    // errorModal()\n\n    //    let modalAction = () => {\n\n    //         const modal = document.querySelector(\"#mascotModal\");\n\n    //         document.querySelector(\"#mascotButton\").addEventListener(\"click\", function() {\n    //             modal.style.display = \"block\";\n    //         });\n\n    //         document.querySelector(\".modalClose\").addEventListener(\"click\", function() {\n    //             modal.style.display = \"none\";\n    //         });\n\n    //         window.addEventListener(\"click\", function(event) {\n    //             if (event.target == modal) {\n    //                 modal.style.display = \"none\";\n    //             }\n    //         });\n\n    //     };\n\n\n    render() {\n\n        console.log(this.state.loading)\n\n        // react life cycle component – render\n        return (\n            <main>\n                {/* <main className='mQWebAll mQTabletAll mQPhoneAll'> */}\n\n                {/* Appliction Form */}\n                <form style={styles.inputForm}>\n                    <div className='mQWebAll mQTabletAll mQPhoneAll'>\n\n\n                        {/* QR Code Image and Send/Save Buttons */}\n                        {/* QR Code Image and Send/Save Buttons */}\n                        <section className='mQWebLeft ' id='mQImageButton' style={styles.qrCodeImageButtons}>\n                            {/* QR Code Image */}\n                            <article style={styles.imageContainer} >\n                                <img className='QRimage'\n                                    onLoad={() => { this.setState({ loading: false }) }}\n                                    src={(this.state.imageURL || QRPlaceholder)}\n                                    height=\"175\" width=\"175\" alt=\"QR Code\" style={styles.QRCode}\n                                />\n                            </article>\n\n                            {/* QR Code Buttons */}\n                            <article style={styles.qrCodeButtons}>\n                                <button id='sendButton'\n                                    style={styles.buttonSend}\n                                    onClick={this.getCode}\n                                >Get It!</button>\n                                {/* <button id='savedButton' style={styles.buttonSave}>Saved</button> */}\n                                {/* <img src={Download} alt=\"Info\" style={styles.download} /> */}\n                            </article>\n                        </section>\n\n\n                        {/* QR Code name and text input fields */}\n                        {/* QR Code name and text input fields */}\n                        <div className='mQWebRight '>\n                            <section style={styles.nameTextFields}>\n\n                                {/* QR Code Name Input */}\n                                {/* <article style={styles.codeName}>\n                                    <input type='text'\n                                        style={styles.nameFieldInput}\n                                        name=\"QRCodeName\"\n                                        placeholder=\" Code Name\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </article> */}\n\n                                {/* QR Code Text Input */}\n                                <article style={styles.codeText}>\n                                    <textarea\n                                        style={styles.textFieldInput}\n                                        name=\"QRCodeText\"\n                                        rows=\"5\" cols=\"30\"\n                                        placeholder=\" Code Text\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </article>\n                            </section>\n\n\n                            {/* QR Code Radio Buttons (all) */}\n                            {/* QR Code Radio Buttons (all) */}\n                            <section className='radios' style={styles.radios}>\n                                {/* Radio Group (3) 1 of 2 */}\n                                <article className='mQWebRightRadio1 '>\n                                    {/* QR Code Image Size */}\n                                    <div style={styles.radioGroupDiv}>\n                                        <h1 style={styles.H2}>Code Size</h1>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"imageSize\"\n                                                value='&size=150x150'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Small</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"imageSize\"\n                                                value='&size=350x350'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Medium</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"imageSize\"\n                                                value='&size750x750'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Large</label>\n                                        </div >\n                                    </div>{/* QR Code Image Size */}\n\n                                    {/* QR Code Image File Format */}\n                                    <div id=\"format\" style={styles.radioGroupDiv}>\n                                        <h2 style={styles.H2}>File Format</h2>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                // type='color'\n                                                style={styles.radioInput}\n                                                name=\"fileFormat\"\n                                                value='&format=svg'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>svg</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"fileFormat\"\n                                                value='&format=png'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>png</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"fileFormat\"\n                                                value='&format=jpg'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>jpg</label>\n                                        </div>\n                                    </div>{/* QR Code Image File Format */}\n\n                                    {/* QR Code Image Foreground Color */}\n                                    <div style={styles.radioGroupDiv}>\n                                        <h1 style={styles.H2}>Code Color</h1>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"FGColor\"\n                                                value='&color=414141'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Dk Grey</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"FGColor\"\n                                                value='&color=0051c2'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Dk Blue</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"FGColor\"\n                                                value='&color=c20000'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Dk Red</label>\n                                        </div>\n                                    </div>{/* QR Code Image Foreground Color */}\n                                </article> {/* Radio Group (3) 1 of 2 */}\n\n                                {/* Radio Group (3) 2 of 2 */}\n                                <article className='mQWebRightRadio2 '>\n                                    {/* QR Code Image Background Color */}\n                                    <div style={styles.radioGroupDiv}>\n                                        <h1 style={styles.H2}>Background Color</h1>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"BGColor\"\n                                                value='&bgcolor=EDEDED'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Lt Grey</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"BGColor\"\n                                                value='&bgcolor=edf5ff'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Lt Blue</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"BGColor\"\n                                                value='&bgcolor=ffeded'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>Lt Red</label>\n                                        </div>\n                                    </div>{/* QR Code Image Background Color */}\n\n                                    {/* QR Code Image Error Correction */}\n                                    <div style={styles.radioGroupDiv}>\n                                        <h1 style={styles.H2}>Error Correct</h1>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"errorCorrect\"\n                                                value='&ecc=L'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>low</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"errorCorrect\"\n                                                value='&ecc=H'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>high</label>\n                                        </div>\n                                    </div>{/* QR Code Image Error Correction */}\n\n                                    {/* QR Code Image Border */}\n                                    <div style={styles.radioGroupDiv}>\n                                        <h1 style={styles.H2}>Code Border</h1>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"codeBorder\"\n                                                value='&margin=0'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>none</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                // checked='checked'\n                                                name=\"codeBorder\"\n                                                value='&margin=8'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>thin</label>\n                                        </div>\n                                        <div style={styles.inputLabel}>\n                                            <input\n                                                type='radio'\n                                                style={styles.radioInput}\n                                                name=\"codeBorder\"\n                                                value='&margin=20'\n                                                onChange={this.changeHandler}\n                                            />\n                                            <label style={styles.label}>thick</label>\n                                        </div>\n                                    </div>{/* QR Code Image Border */}\n                                </article>{/* Radio Group (3) 2 of 2 */}\n                            </section>\n                        </div>\n                    </div>\n                </form>\n\n\n            </main >\n\n        )\n    }\n}\n\nexport default GeneratorComp\n\nconst styles = {\n    errorTest: {\n        display: 'none'\n    },\n    inputForm: {\n        margin: 'auto'\n    },\n    imageContainer: {\n        margin: '.8em auto 1em auto',\n        paddingTop: '.38em',\n        height: '195px',\n        width: '195px',\n        background: 'rgb(213, 213, 213)',\n        borderRadius: '1em'\n    },\n    QRCode: {\n        borderRadius: '.8em'\n    },\n\n    // Send Save Buttons\n    qrCodeImageButtons: {\n    },\n    buttonSend: {\n        display: 'inline',\n        margin: '0 .25em',\n        background: 'rgb(237 237 237)',\n        color: 'rgb(081 081 081)',\n        width: '4em',\n        borderRadius: '.3em'\n    },\n    buttonSave: {\n        margin: '0 .25em',\n        background: 'rgb(237 237 237)',\n        color: 'rgb(081 081 081)',\n        width: '4em',\n        borderRadius: '.3em'\n    },\n    downloadIcon: {\n        paddingTop: \".2em\",\n        margin: '0'\n    },\n\n    // Text Input Fields\n    nameTextFields: {\n        margin: '1em auto',\n        width: '80%',\n        maxWidth: '13em'\n    },\n\n    // QR Code Name\n    codeName: {\n        margin: '0 0 1em .21em'\n    },\n\n    // QR Code Text\n    codeText: {\n    },\n    nameFieldInput: {\n        margin: 'auto',\n        width: '100%',\n        borderRadius: '.6em'\n    },\n    textFieldInput: {\n        fontSize: '.6em',\n        margin: 'auto',\n        width: '100%',\n        resize: 'none',\n        borderRadius: '.8em'\n    },\n\n    // Radio Buttons\n    H2: {\n        color: 'rgb(075 075 075)',\n        textShadow: '.06em .06em rgba(65, 65, 65, 0.3)'\n    },\n    radios: {\n    },\n    radioGroupDiv: {\n        display: 'block',\n        margin: '.6em auto 1em auto'\n    },\n    inputLabel: {\n        display: 'inline-block',\n        margin: '0 .25em'\n    },\n    radioInput: {\n        display: 'block',\n        textAlign: 'center',\n        margin: 'auto'\n    },\n    label: {\n        color: 'rgb(75 75 75)',\n        margin: '0 auto',\n        textAlign: 'center',\n        fontSize: '.8em',\n        textShadow: '.06em .06em rgba(65, 65, 65, 0.3)'\n    },\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n// import { IoMdClose } from 'react-icons/io'\nimport Close from '../images/close.svg'\n\n// assets\n\nconst About = props => {\n    // react life cycle component – render\n    return (\n        <div style={styles.aboutAllDiv}>\n            <div style={styles.leftDiv}>\n\n            </div>\n            <section style={styles.center}>\n                <article style={styles.aboutTextDiv}>\n                    <header style={styles.aboutHeading}>\n                        <div></div>\n                        <h1 style={styles.h1} >About</h1>\n                        <NavLink to=\"/\">\n                        <img src={Close} alt=\"Close\" style={styles.close} width=\"30\" height=\"30\" />\n                        </NavLink>\n                    </header>\n                    <h2 style={styles.h2} >This app will generate a functioning QR Code.</h2>\n                    <h2 style={styles.h2} >Add text, select option and press the \"Get It!\" button. </h2>\n                </article>\n                <article style={styles.h1}>\n                </article>\n            </section>\n            <div style={styles.rightDiv}>\n\n            </div>\n        </div>\n    )\n}\n\nconst styles = {\n    aboutAllDiv: {\n        margin: '1.6em 0 0 0',\n        display: 'flex',\n        justifyContent: 'space-between',\n        color: '#414141'\n    },\n    aboutHeading: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    center: {\n        maxWidth: '400px',\n        padding: '0 .8em',\n        borderRadius: '.4em',\n        border: 'solid .03em',\n        background: 'rgba(213, 213, 213, .7)'\n    },\n    aboutTextDiv: {\n        alignContent: 'center',\n        margin: '1.6em 0 1em 0'\n    },\n    h1: {\n        \n        textDecoration: 'underline',\n        fontWeight: '900',\n        margin: '0 0 .5em 2em'\n    },\n    close: {\n        margin: '-.7em 0.3em 0 0',\n        transform: 'translate(-15%, -70%)'\n    },\n    leftDiv: {\n        width: '10%'\n    },\n    rightDiv: {\n        width: '10%'\n    }\n}\n\nexport default About","//https://api.qrserver.com/v1/create-qr-code/?data=Cheesy%20Code&size=500x500&ecc=H&color=E5312C&bgcolor=0000ff&margin=20&format=svg\n\nimport React, { Component } from 'react'\nimport '../mediaQueries.css'\n// import MediaQuery from 'react-responsive';\n\n// assets\nimport QRPlaceholder from '../images/QRPlaceholder.svg'\n\nclass Test extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: 'https://api.qrserver.com/v1/create-qr-code/?data=',\n            QRCodeText: '',\n            imageSize: '',\n            FGColor: '',\n            imageURL: '',\n        };\n        this.changeHandler = this.changeHandler.bind(this);\n        // console.log(this.state)\n    }\n    componentDidMount() { }\n\n    getCode = (e) => {\n        e.preventDefault()\n        let codeURL = `${this.state.url}${this.state.QRCodeText}${this.state.imageSize}${this.state.FGColor}`\n\n        console.log(codeURL)\n        // return\n\n        // const codeUrl = \"http://api.qrserver.com/v1/create-qr-code/?data=%2BQR+%20Code+%20Test%2B&size=100x100\"\n\n        this.setState({\n\n            imageURL: codeURL\n        })\n\n        // fetch(codeURL, {\n        //     method: 'GET',\n        //     // headers: {\n        //     //     'Content-Type': 'img'\n        //     // },\n        //     mode: 'cors',\n        // })\n\n        //     .then( ()=>{ document.querySelector(\"#QRimage\").innerHTML = codeURL})\n        //     .then(console.log(codeURL))\n        //     .catch(error => console.log('There was an error', error))\n        // console.error(\"IT BROKE\",codeURL)\n    }\n\n    changeHandler = (event) => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({ [nam]: val });\n        // this.setState({text: event.target.value});\n        // console.log(this.state)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.getCode} >\n                {/* <MediaQuery minDeviceWidth={700}> */}\n                <div id='MQHeading' style={styles.headings}>\n                    <h1>Text {this.state.QRCodeText}</h1>\n                    <h1>Size {this.state.imageSize}</h1>\n                    <h1>Color {this.state.FGColor}</h1>\n                </div>\n                {/* </MediaQuery> */}\n                {/* QR Code Image and Send/Save Buttons */}\n                <section style={styles.qrCodeImageButtons}>\n\n                    {/* QR Code Image */}\n                    <article style={styles.imageContainer} >\n                        <img id='QRimage' src={(this.state.imageURL || QRPlaceholder)} height=\"175\" width=\"175\" alt=\"QR Code\" style={styles.QRCode} />\n                    </article>\n\n                    {/* QR Code Buttons */}\n                    <article style={styles.qrCodeButtons}>\n                        <button id='sendButton'\n                            style={styles.buttonSend}\n                            onClick={this.getCode}\n                        >Send</button>\n                        {/* <button id='savedButton' style={styles.buttonSave}>Save</button> */}\n                        <input\n                            type='submit'\n                        />\n                        {/* <img src={Download} alt=\"Info\" style={styles.download} /> */}\n                    </article>\n                </section>\n\n                <article style={styles.codeText}>\n                    <textarea\n                        // type='text'\n                        style={styles.textFieldInput}\n                        name=\"QRCodeText\"\n                        rows=\"5\" cols=\"30\"\n                        placeholder=\" Code Text\"\n                        onChange={this.changeHandler}\n                    />\n                </article>\n\n                <input\n                    type='radio'\n                    // checked='checked'\n                    style={styles.radioInput}\n                    name=\"imageSize\"\n                    value='&size=350x350'\n                    onChange={this.changeHandler}\n                />\n                <label style={styles.label}>Medium</label>\n\n                <input\n                    type='radio'\n                    style={styles.radioInput}\n                    name=\"FGColor\"\n                    value='&color=EDEDED'\n                    onChange={this.changeHandler}\n                />\n                <label style={styles.label}>Lt Grey</label>\n\n            </form>\n\n        )\n    }\n}\n\nconst styles = {\n\n    // headings: {\n\n    // },\n    imageContainer: {\n        margin: '1em auto 1em auto',\n        paddingTop: '.38em',\n        height: '195px',\n        width: '195px',\n        background: 'rgb(213, 213, 213)',\n        borderRadius: '1em'\n    },\n    codeName: {\n        \n    },\n    radioInput: {\n        \n    },\n    buttonSend: {\n        \n    },\n}\n\nexport default Test","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport QRGenerator from '../Component/QRGenerator';\nimport About from '../Component/About';\nimport Test from '../Component/Test';\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path='/' component={QRGenerator} />\n                    <Route exact path='/QRGenerator' component={QRGenerator} />\n                    <Route exact path='/About' component={About} />\n                    <Route exact path='/Test' component={Test} />\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default Routes","/* \n   • Umholtz, Tommy\n   • Full Sail University\n   • Web Design and Development, Bachelors of Science – Online\n   • Web Design Portfolio 5 (WDPV)\n   • Week 2 – Development Phase 1\n   */\n\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport About from '../images/info.svg'\n\nconst Header = () => {\n  return (\n    <div id='header' style={styles.headerDiv}>\n      {/* <NavLink to=\"/\">  */}\n        <h1 style={styles.h1}>QR Code Generator</h1>\n        {/* </NavLink> */}\n      <NavLink to=\"/about\">\n      <img src={About} alt=\"Info\" style={styles.ellipsis} width=\"30\" height=\"30\" fill=\"FFFFF\" />\n      </NavLink>\n    </div>\n  )\n}\n\nexport default Header\n\nconst styles = {\n  headerDiv: {\n    display: 'flex',\n    width: '100%',\n    color: 'rgb(065 065 065)',\n    padding: '.4em 0',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    background: 'rgba(213, 213, 213, 1)',\n    borderBottom: 'solid .03em'\n  },\n  h1: {\n    fontSize: '.95em',\n    margin: '.34em 0 0 1.1em',\n    textShadow: '.06em .06em rgba(65, 65, 65, 0.3)'\n  },\n  ellipsis: {\n    margin: '.25em .5em 0 0',\n    border: 'none',\n    background: 'none'\n  }\n} ","/* \n   • Umholtz, Tommy\n   • Full Sail University\n   • Web Design and Development, Bachelors of Science – Online\n   • Web Design Portfolio 5 (WDPV)\n   • Week 2 – Development Phase 1\n   */\n\nimport React from 'react'\n\nconst Footer = props => {\n  return (\n    <div style={styles.footerDiv}>\n      <h3 style={styles.h3}>© 2020 Supers Cafe</h3>\n    </div>\n  )\n}\nexport default Footer\n\nconst styles = {\n  footerDiv: {\n    display: 'flex',\n    width: '100%',\n    position: 'fixed',\n    bottom: '0',\n    margin: '0',\n    height: 'auto',\n    color: 'rgb(065 065 065)',\n    padding: '.3em 0',\n    background: 'rgba(213, 213, 213, 1)',\n    borderTop: 'solid .03em'\n  },\n  h3: {\n    fontSize: '.6em',\n    lineHeight: '120%',\n    margin: '.25em 0 0 1em'\n  }\n} ","import React, { Component } from 'react'\nimport './App.css';\nimport Routes from './Component/Routes.jsx';\nimport { HashRouter as Router } from 'react-router-dom'\n// import { BrowserRouter as Router} from 'react-router-dom'\nimport Header from './Component/StaticHeader.jsx'\n// import QRGenerator from './Component/QRGenerator.js'\n// import Test from './Component/Test.js'\nimport Footer from './Component/StaticFooter.jsx'\n\nclass App extends Component {\n\n    render() {\n\n        return (\n\n            <main>\n                <Router>\n                    <Header />\n                    <Routes />\n                    <Footer />\n                </Router>\n            </main>\n\n        )\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}